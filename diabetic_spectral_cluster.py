"""
Спектральная кластеризация (Spectral Clustering) - это метод кластеризации, который основывается на спектральном анализе графа схожести (similarity graph) между точками данных. Он позволяет обнаруживать сложные структуры и кластеры в данных, даже если они не являются выпуклыми или линейно разделимыми.

Основные шаги спектральной кластеризации:

1. Создание графа схожести: Вычисляется матрица схожести между точками данных. Это может быть матрица расстояний или матрица схожести, которая отражает степень схожести между точками. Обычно используется метод K-ближайших соседей или ядерная функция для вычисления схожести.

2. Построение графа схожести: На основе матрицы схожести строится граф схожести, где точки данных представляют вершины графа, а ребра отражают их схожесть. Можно использовать различные подходы для построения графа, такие как эпсилон-ближайшие соседи или полный граф.

3. Вычисление лапласиана графа: Из графа схожести вычисляется лапласиан, который представляет собой нормализованную версию матрицы смежности графа. Лапласиан позволяет получить информацию о структуре и связях в графе.

4. Поиск собственных векторов: Вычисляются собственные векторы лапласиана графа. Они представляют собой новое представление точек данных и позволяют выделить структуры и кластеры.

5. Кластеризация: Используя полученные собственные векторы, можно применить алгоритм кластеризации, например, метод K-средних, для разделения точек данных на кластеры.

Спектральная кластеризация позволяет обнаруживать кластеры произвольной формы и хорошо работает с нелинейными и сложными структурами данных. Однако она может быть вычислительно сложной для больших наборов данных и требует выбора подходящих параметров, таких как число кластеров или ширина окна в методе K-ближайших соседей.
"""


import pandas as pd
from sklearn.cluster import SpectralClustering
from sklearn.metrics import silhouette_score
import matplotlib.pyplot as plt

# Загрузка датасета
data = pd.read_csv("diabetes.csv")

# Предварительная обработка данных
data.dropna(inplace=True)
data_norm = (data - data.mean()) / data.std()

# Кластеризация методом спектральной кластеризации
spectral = SpectralClustering(n_clusters=3, affinity='nearest_neighbors')
labels = spectral.fit_predict(data_norm)

# Оценка результатов
silhouette_avg = silhouette_score(data_norm, labels)
print("Средний индекс силуэта:", silhouette_avg)

# Визуализация кластеров
plt.scatter(data_norm.iloc[:, 0], data_norm.iloc[:, 1], c=labels, cmap='viridis')
plt.xlabel(data_norm.columns[0])
plt.ylabel(data_norm.columns[1])
plt.title('Cluster Visualization')
plt.show()
